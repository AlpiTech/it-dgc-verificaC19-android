name: $(Build.BuildID) - dgca-verifier-app-android

trigger:
  branches:
    include:
    - develop
    - feature/*
    - releases/*
  batch: true
pr:
  branches:
    include:
    - develop
    - releases/*


resources:
  repositories:
  - repository: dgca-app-core-android
    type: github
    name: eu-digital-green-certificates/dgca-app-core-android
    ref: 'refs/tags/1.0.0'
    endpoint: 'GitHub - it-eucert-team'

pool:
  vmImage: 'ubuntu-latest'

variables:
  publishToAppCenter: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  publishToStore: $[contains(variables['Build.SourceBranch'], 'refs/heads/releases')]
  versionCounter: $[counter(variables['Build.SourceBranch'], 100)] 

stages:
- stage: Build
  jobs:
  - job: BuildApk

    steps:
    - checkout: self
      clean: true
    - checkout: dgca-app-core-android

    - task: Bash@3
      displayName: check pipeline variable value
      inputs:
        targetType: 'inline'
        script: |
          echo 'Check pipeline var'
          echo 'publishToAppCenter: $(publishToAppCenter)'
          echo 'publishToStore $(publishToStore)'
          echo $(versionCounter)
          echo 'commit message: $(Build.SourceVersionMessage)'
          echo '##vso[task.setvariable variable=message]$(Build.SourceVersionMessage)'
          if [[ $(Build_SourceVersionMessage) == *"#build-release"* ]]; then
            echo '##vso[task.setvariable variable=build]true'
            echo '##vso[task.setvariable variable=release]true'
          fi
          if [[ $(Build_SourceVersionMessage) == *"#build-debug"* ]]; then
            echo '##vso[task.setvariable variable=build]true'
            echo '##vso[task.setvariable variable=debug]true'
          fi
          if [[ $(Build_SourceVersionMessage) == *"#appcenter"* ]]; then
            echo '##vso[task.setvariable variable=appcenter]true'
          fi
          if [[ $(Build_SourceVersionMessage) == *"#store"* ]]; then
            echo '##vso[task.setvariable variable=store]true'
          fi
        failOnStderr: true
        
    # - task: ExtractVersionFromTag@1
    #   inputs:
    #     projectFolderPath: '$(Build.SourcesDirectory)'
    
    - bash: |
         echo 'message $(message)'
         echo 'build $(build)'
         echo 'debug $(debug)'
         echo 'release $(release)'
         echo 'appcenter $(appcenter)'
         echo 'store $(store)'
    #     echo '$(NUMBER_OF_COMMITS)'
    #     echo '$(MAJOR).$(MINOR).$(PATCH)-dev'

  
    # - task: UpdateAndroidVersionGradle@1
    #   inputs:
    #     buildGradlePath: 'it-dgc-verificaC19-android/app/build.gradle'
    #     versionCode: '$(NUMBER_OF_COMMITS)'
    #     versionName: '$(MAJOR).$(MINOR).$(PATCH)-dev' 
    #     ${{ if contains(variables['message'],'#build-release') }}: 
    #       versionName: '$(MAJOR).$(MINOR).$(PATCH)'
    #   condition: and(succeeded(), contains(variables['message'],'#build-debug'))

    # - task: SonarQubePrepare@4
    #   inputs:
    #     SonarQube: 'SonarQube Azure 8.9'
    #     scannerMode: 'CLI'
    #     configMode: 'manual'
    #     cliProjectKey: '$(System.TeamProject)_it-dgc-verificaC19-android'
    #     cliProjectName: '$(System.TeamProject)_it-dgc-verificaC19-android'
    #     cliProjectVersion: '$(Build.SourceBranchName)_$(Build.SourceVersion)'
    #     cliSources: '.'
    #     extraProperties: |
    #       sonar.java.binaries=.
    #       sonar.exclusions=**/CCReport*/**
    #   continueOnError: true

    # - task: SonarQubeAnalyze@4
    #   continueOnError: true
    #   condition: succeeded()

    # - task: SonarQubePublish@4
    #   inputs:
    #     pollingTimeoutSec: '300'
    #   continueOnError: true
    #   condition: succeeded()
    # - task: Gradle@2
    #   inputs:
    #     gradleWrapperFile: 'it-dgc-verificaC19-android/gradlew'
    #     workingDirectory: 'it-dgc-verificaC19-android'
    #     tasks: 'assembleRelease'
    #     publishJUnitResults: true
    #     testResultsFiles: '**/TEST-*.xml'
    #     javaHomeOption: 'JDKVersion'
    #     jdkVersionOption: '1.8'
    #     gradleOptions: '-Xmx3072m'
    #     sonarQubeRunAnalysis: false
    #     spotBugsAnalysis: false

    # - task: CopyFiles@2
    #   inputs:
    #     contents: '**/*.apk'
    #     targetFolder: '$(build.artifactStagingDirectory)'

    # - task: AndroidSigning@3
    #   inputs:
    #     apkFiles: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/apk/release/app-release-unsigned.apk'
    #     apksignerKeystoreFile: 'android-c19-key.jks'
    #     apksignerKeystorePassword: '$(keystorepassword)'
    #     apksignerKeystoreAlias: '$(keystorealias)'
    #     apksignerKeyPassword: '$(keystorepassword)'
    #     zipalign: false

    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/apk/release/app-release-unsigned.apk'
    #     artifact: 'apk'
    #     publishLocation: 'pipeline'

    # # verificare eventuali condizioni sui rami per eseguire questo step (ad esempio non sulla feature, ma solo su develop e release?)
    # - task: Gradle@2
    #   inputs:
    #     gradleWrapperFile: 'it-dgc-verificaC19-android/gradlew'
    #     workingDirectory: 'it-dgc-verificaC19-android'
    #     tasks: ':app:bundleRelease'
    #     publishJUnitResults: false
    #     javaHomeOption: 'JDKVersion'
    #     jdkVersionOption: '1.8'
    #     gradleOptions: '-Xmx3072m'
    #     sonarQubeRunAnalysis: false
    #     spotBugsAnalysis: false

    # - task: CopyFiles@2
    #   inputs:
    #     contents: '**/*.aab'
    #     targetFolder: '$(build.artifactStagingDirectory)'

    # - task: AndroidSigning@2
    #   inputs:
    #     apkFiles: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/bundle/release/app-release.aab'
    #     jarsignerKeystoreFile: 'android-c19-key.jks'
    #     jarsignerKeystorePassword: '$(keystorepassword)'
    #     jarsignerKeystoreAlias: '$(keystorealias)'
    #     jarsignerKeyPassword: '$(keystorepassword)'
    #     jarsignerArguments: '-sigalg SHA256withRSA -digestalg SHA-256'
    
    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/bundle/release/app-release.aab'
    #     artifact: 'bundle'
    #     publishLocation: 'pipeline'
    
    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: 'it-dgc-verificaC19-android/metadata/release-notes.xml'
    #     artifact: 'release-notes'
    #     publishLocation: 'pipeline'

      
