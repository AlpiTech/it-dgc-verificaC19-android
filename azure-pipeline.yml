name: $(Build.BuildID) - dgca-verifier-app-android

trigger:
  branches:
    include:
    - develop
    - feature/*
    - releases/*
    - azure-pipelines
 

pr:
  branches:
    include:
    - develop
    - releases/*

 
resources:
  repositories:
  - repository: dgca-app-core-android
    type: github
    name: eu-digital-green-certificates/dgca-app-core-android
    ref: 'refs/tags/1.0.0'
    endpoint: 'GitHub - it-eucert-team'

pool:
  vmImage: 'ubuntu-latest'

variables:
  versionCounter: $[counter(variables['Build.SourceBranch'], 100)] 

stages:
- stage: Build
  jobs:
  - job: InitPipeline

    steps:
    - checkout: self
      clean: true
    - checkout: dgca-app-core-android

    - task: Bash@3
      displayName: set init value
      name: checkBuildCommit
      inputs:
        targetType: 'inline'
        script: |
          echo "Check trigger pipeline var"
          echo $(versionCounter) 
          echo "commit message: $(Build.SourceVersionMessage)"
          echo "##vso[task.setvariable variable=message;isOutput=true;]$(Build.SourceVersionMessage)"
          GIT_MESSAGE="$(Build.SourceVersionMessage)"
          BUILD_REASON=$(Build.Reason)
 
          echo "buildReason: $BUILD_REASON"
          echo "gitMessage: $GIT_MESSAGE"

          echo "##vso[task.setvariable variable=build;isOutput=true;]$(build)"
          echo "##vso[task.setvariable variable=debug;isOutput=true;]$(debug)"
          echo "##vso[task.setvariable variable=release;isOutput=true;]$(release)"
          echo "##vso[task.setvariable variable=appcenter;isOutput=true;]$(appcenter)"
          echo "##vso[task.setvariable variable=store;isOutput=true;]$(store)"
          
          if [[ ! BUILD_REASON == 'IndividualCI' ]]; then
            echo "Set variable for Build Reason Individual CI"
            
            if [[ ! $GIT_MESSAGE == *"#build"* ]]; then
                echo "Not a build commit. Stopping the execution of the build job."
            fi

            if [[ $GIT_MESSAGE == *"#build-release"* ]]; then
              echo "set variabili build e release a true"
              echo "##vso[task.setvariable variable=build;isOutput=true;]true"
              echo "##vso[task.setvariable variable=release;isOutput=true;]true"
            fi

            if [[ $GIT_MESSAGE == *"#build-debug"* ]]; then
              echo "set variabili build e debug a true"
              echo "##vso[task.setvariable variable=build;isOutput=true;]true"
              echo "##vso[task.setvariable variable=debug;isOutput=true;]true"
            fi

            if [[ $GIT_MESSAGE == *"#appcenter"* ]]; then
              echo "set variabili appcenter a true"
              echo "##vso[task.setvariable variable=appcenter;isOutput=true;]true"
            fi

            if [[ $GIT_MESSAGE == *"#store"* ]]; then
              echo "set variabili store a true"
              echo "##vso[task.setvariable variable=store;isOutput=true;]true"
            fi
          fi

          if [[ BUILD_REASON == 'PullRequest' ]]; then
              echo "Set variable for Build Reason PullRequest "
              echo "##vso[task.setvariable variable=build;isOutput=true;]true"
              echo "##vso[task.setvariable variable=debug;isOutput=true;]true"
          fi

    - bash: |
         echo 'message $(checkBuildCommit.message)'
         echo 'build $(checkBuildCommit.build)'
         echo 'debug $(checkBuildCommit.debug)'
         echo 'release $(checkBuildCommit.release)'
         echo 'appcenter $(checkBuildCommit.appcenter)'
         echo 'store $(checkBuildCommit.store)'
    #     echo '$(NUMBER_OF_COMMITS)'
    #     echo '$(MAJOR).$(MINOR).$(PATCH)-dev'

  - job: BuildApk
    dependsOn: InitPipeline
    condition: and(succeeded(), eq(dependencies.InitPipeline.outputs['checkBuildCommit.build'], true))
    variables: 
      build: $[ dependencies.InitPipeline.outputs['checkBuildCommit.build'] ]
      debug: $[ dependencies.InitPipeline.outputs['checkBuildCommit.debug'] ]
      release: $[ dependencies.InitPipeline.outputs['checkBuildCommit.release'] ]
      appcenter: $[ dependencies.InitPipeline.outputs['checkBuildCommit.appcenter'] ]
      store: $[ dependencies.InitPipeline.outputs['checkBuildCommit.store'] ]

    steps:
    - checkout: self
      clean: true
    - checkout: dgca-app-core-android
    
    # - task: ExtractVersionFromTag@1
    #   inputs:
    #     projectFolderPath: '$(Build.SourcesDirectory)'
    
    - bash: |
         echo 'message $(message)'
         echo 'build $(build)'
         echo 'debug $(debug)'
         echo 'release $(release)'
         echo 'appcenter $(appcenter)'
         echo 'store $(store)'
    #    echo '$(NUMBER_OF_COMMITS)'
    #    echo '$(MAJOR).$(MINOR).$(PATCH)-dev'
    
    - task: UpdateAndroidVersionGradle@1
      inputs:
        buildGradlePath: 'it-dgc-verificaC19-android/app/build.gradle'
        versionCode: '$(NUMBER_OF_COMMITS)'
        # versionName: '$(MAJOR).$(MINOR).$(PATCH)-dev'
        versionName: '$(version-name)-dev'
        ${{ if eq(variables['release'],true) }}:
          versionName: '$(version-name)'

    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'SonarQube Azure 8.9'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(System.TeamProject)_it-dgc-verificaC19-android'
        cliProjectName: '$(System.TeamProject)_it-dgc-verificaC19-android'
        cliProjectVersion: '$(Build.SourceBranchName)_$(Build.SourceVersion)'
        cliSources: '.'
        extraProperties: |
          sonar.java.binaries=.
          sonar.exclusions=**/CCReport*/**
      continueOnError: true

    - task: SonarQubeAnalyze@4
      continueOnError: true
      condition: succeeded()

    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
      continueOnError: true
      condition: succeeded()
    - task: Gradle@2
      inputs:
        gradleWrapperFile: 'it-dgc-verificaC19-android/gradlew'
        workingDirectory: 'it-dgc-verificaC19-android'
        tasks: 'assembleRelease'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        gradleOptions: '-Xmx3072m'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

    - task: CopyFiles@2
      inputs:
        contents: '**/*.apk'
        targetFolder: '$(build.artifactStagingDirectory)'

    - task: AndroidSigning@3
      inputs:
        apkFiles: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/apk/release/app-release-unsigned.apk'
        apksignerKeystoreFile: 'android-c19-key.jks'
        apksignerKeystorePassword: '$(keystorepassword)'
        apksignerKeystoreAlias: '$(keystorealias)'
        apksignerKeyPassword: '$(keystorepassword)'
        zipalign: false

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/apk/release/app-release-unsigned.apk'
        artifact: 'apk'
        publishLocation: 'pipeline'

    # verificare eventuali condizioni sui rami per eseguire questo step (ad esempio non sulla feature, ma solo su develop e release?)
    - task: Gradle@2
      inputs:
        gradleWrapperFile: 'it-dgc-verificaC19-android/gradlew'
        workingDirectory: 'it-dgc-verificaC19-android'
        tasks: ':app:bundleRelease'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        gradleOptions: '-Xmx3072m'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

    - task: CopyFiles@2
      inputs:
        contents: '**/*.aab'
        targetFolder: '$(build.artifactStagingDirectory)'

    - task: AndroidSigning@2
      inputs:
        apkFiles: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/bundle/release/app-release.aab'
        jarsignerKeystoreFile: 'android-c19-key.jks'
        jarsignerKeystorePassword: '$(keystorepassword)'
        jarsignerKeystoreAlias: '$(keystorealias)'
        jarsignerKeyPassword: '$(keystorepassword)'
        jarsignerArguments: '-sigalg SHA256withRSA -digestalg SHA-256'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(build.artifactStagingDirectory)/it-dgc-verificaC19-android/app/build/outputs/bundle/release/app-release.aab'
        artifact: 'bundle'
        publishLocation: 'pipeline'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'it-dgc-verificaC19-android/metadata/release-notes.xml'
        artifact: 'release-notes'
        publishLocation: 'pipeline'

      
